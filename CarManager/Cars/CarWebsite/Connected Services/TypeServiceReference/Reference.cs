//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarWebsite.TypeServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TypeServiceReference.IType")]
    public interface IType {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/Message", ReplyAction="http://tempuri.org/IType/MessageResponse")]
        string Message();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/Message", ReplyAction="http://tempuri.org/IType/MessageResponse")]
        System.Threading.Tasks.Task<string> MessageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/GetTypes", ReplyAction="http://tempuri.org/IType/GetTypesResponse")]
        ApplicationServices.DTOs.TypeDto[] GetTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/GetTypes", ReplyAction="http://tempuri.org/IType/GetTypesResponse")]
        System.Threading.Tasks.Task<ApplicationServices.DTOs.TypeDto[]> GetTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/GetTypeById", ReplyAction="http://tempuri.org/IType/GetTypeByIdResponse")]
        ApplicationServices.DTOs.TypeDto GetTypeById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/GetTypeById", ReplyAction="http://tempuri.org/IType/GetTypeByIdResponse")]
        System.Threading.Tasks.Task<ApplicationServices.DTOs.TypeDto> GetTypeByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/PostType", ReplyAction="http://tempuri.org/IType/PostTypeResponse")]
        string PostType(ApplicationServices.DTOs.TypeDto typeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/PostType", ReplyAction="http://tempuri.org/IType/PostTypeResponse")]
        System.Threading.Tasks.Task<string> PostTypeAsync(ApplicationServices.DTOs.TypeDto typeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/PutType", ReplyAction="http://tempuri.org/IType/PutTypeResponse")]
        string PutType(ApplicationServices.DTOs.TypeDto typeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/PutType", ReplyAction="http://tempuri.org/IType/PutTypeResponse")]
        System.Threading.Tasks.Task<string> PutTypeAsync(ApplicationServices.DTOs.TypeDto typeDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/DeleteType", ReplyAction="http://tempuri.org/IType/DeleteTypeResponse")]
        string DeleteType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IType/DeleteType", ReplyAction="http://tempuri.org/IType/DeleteTypeResponse")]
        System.Threading.Tasks.Task<string> DeleteTypeAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITypeChannel : CarWebsite.TypeServiceReference.IType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TypeClient : System.ServiceModel.ClientBase<CarWebsite.TypeServiceReference.IType>, CarWebsite.TypeServiceReference.IType {
        
        public TypeClient() {
        }
        
        public TypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Message() {
            return base.Channel.Message();
        }
        
        public System.Threading.Tasks.Task<string> MessageAsync() {
            return base.Channel.MessageAsync();
        }
        
        public ApplicationServices.DTOs.TypeDto[] GetTypes() {
            return base.Channel.GetTypes();
        }
        
        public System.Threading.Tasks.Task<ApplicationServices.DTOs.TypeDto[]> GetTypesAsync() {
            return base.Channel.GetTypesAsync();
        }
        
        public ApplicationServices.DTOs.TypeDto GetTypeById(int id) {
            return base.Channel.GetTypeById(id);
        }
        
        public System.Threading.Tasks.Task<ApplicationServices.DTOs.TypeDto> GetTypeByIdAsync(int id) {
            return base.Channel.GetTypeByIdAsync(id);
        }
        
        public string PostType(ApplicationServices.DTOs.TypeDto typeDto) {
            return base.Channel.PostType(typeDto);
        }
        
        public System.Threading.Tasks.Task<string> PostTypeAsync(ApplicationServices.DTOs.TypeDto typeDto) {
            return base.Channel.PostTypeAsync(typeDto);
        }
        
        public string PutType(ApplicationServices.DTOs.TypeDto typeDto) {
            return base.Channel.PutType(typeDto);
        }
        
        public System.Threading.Tasks.Task<string> PutTypeAsync(ApplicationServices.DTOs.TypeDto typeDto) {
            return base.Channel.PutTypeAsync(typeDto);
        }
        
        public string DeleteType(int id) {
            return base.Channel.DeleteType(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTypeAsync(int id) {
            return base.Channel.DeleteTypeAsync(id);
        }
    }
}
